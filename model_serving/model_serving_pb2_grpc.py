# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import model_serving_pb2 as model__serving__pb2


class ModelServerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/model_serving.ModelServer/Check',
                request_serializer=model__serving__pb2.CheckRequest.SerializeToString,
                response_deserializer=model__serving__pb2.CheckResponse.FromString,
                )
        self.DetInferSync = channel.unary_unary(
                '/model_serving.ModelServer/DetInferSync',
                request_serializer=model__serving__pb2.DetRequest.SerializeToString,
                response_deserializer=model__serving__pb2.DetResponse.FromString,
                )
        self.DetInferPathSync = channel.unary_unary(
                '/model_serving.ModelServer/DetInferPathSync',
                request_serializer=model__serving__pb2.DetPathRequest.SerializeToString,
                response_deserializer=model__serving__pb2.DetResponse.FromString,
                )
        self.DenseInferSync = channel.unary_unary(
                '/model_serving.ModelServer/DenseInferSync',
                request_serializer=model__serving__pb2.DenseRequest.SerializeToString,
                response_deserializer=model__serving__pb2.DenseResponse.FromString,
                )
        self.DenseBatchInferSync = channel.stream_unary(
                '/model_serving.ModelServer/DenseBatchInferSync',
                request_serializer=model__serving__pb2.DenseRequest.SerializeToString,
                response_deserializer=model__serving__pb2.DenseBatchResponse.FromString,
                )
        self.DenseInferPathSync = channel.unary_unary(
                '/model_serving.ModelServer/DenseInferPathSync',
                request_serializer=model__serving__pb2.DensePathRequest.SerializeToString,
                response_deserializer=model__serving__pb2.DenseResponse.FromString,
                )


class ModelServerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetInferSync(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetInferPathSync(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenseInferSync(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenseBatchInferSync(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenseInferPathSync(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=model__serving__pb2.CheckRequest.FromString,
                    response_serializer=model__serving__pb2.CheckResponse.SerializeToString,
            ),
            'DetInferSync': grpc.unary_unary_rpc_method_handler(
                    servicer.DetInferSync,
                    request_deserializer=model__serving__pb2.DetRequest.FromString,
                    response_serializer=model__serving__pb2.DetResponse.SerializeToString,
            ),
            'DetInferPathSync': grpc.unary_unary_rpc_method_handler(
                    servicer.DetInferPathSync,
                    request_deserializer=model__serving__pb2.DetPathRequest.FromString,
                    response_serializer=model__serving__pb2.DetResponse.SerializeToString,
            ),
            'DenseInferSync': grpc.unary_unary_rpc_method_handler(
                    servicer.DenseInferSync,
                    request_deserializer=model__serving__pb2.DenseRequest.FromString,
                    response_serializer=model__serving__pb2.DenseResponse.SerializeToString,
            ),
            'DenseBatchInferSync': grpc.stream_unary_rpc_method_handler(
                    servicer.DenseBatchInferSync,
                    request_deserializer=model__serving__pb2.DenseRequest.FromString,
                    response_serializer=model__serving__pb2.DenseBatchResponse.SerializeToString,
            ),
            'DenseInferPathSync': grpc.unary_unary_rpc_method_handler(
                    servicer.DenseInferPathSync,
                    request_deserializer=model__serving__pb2.DensePathRequest.FromString,
                    response_serializer=model__serving__pb2.DenseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model_serving.ModelServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelServer(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_serving.ModelServer/Check',
            model__serving__pb2.CheckRequest.SerializeToString,
            model__serving__pb2.CheckResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetInferSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_serving.ModelServer/DetInferSync',
            model__serving__pb2.DetRequest.SerializeToString,
            model__serving__pb2.DetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetInferPathSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_serving.ModelServer/DetInferPathSync',
            model__serving__pb2.DetPathRequest.SerializeToString,
            model__serving__pb2.DetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DenseInferSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_serving.ModelServer/DenseInferSync',
            model__serving__pb2.DenseRequest.SerializeToString,
            model__serving__pb2.DenseResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DenseBatchInferSync(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/model_serving.ModelServer/DenseBatchInferSync',
            model__serving__pb2.DenseRequest.SerializeToString,
            model__serving__pb2.DenseBatchResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DenseInferPathSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_serving.ModelServer/DenseInferPathSync',
            model__serving__pb2.DensePathRequest.SerializeToString,
            model__serving__pb2.DenseResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
